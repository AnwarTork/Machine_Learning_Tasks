# -*- coding: utf-8 -*-
"""BikeStore_Analysis_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PRoinluxOg-jAjwVXzXfxAIqESimMlpR

# PYTHON DATA ANALYSIS

## Outline
- Data Analysis Steps
- Full Data Analysis Case-study
    - BikeStores Analysis

# Full Data Analysis Case-study (BikeStores Analysis)

### 1] Libraries & Data Importing

##### Import libraries and read in the BikeStores csv file
"""

import pandas as pd

BikeStores_data = pd.read_csv('/content/BikeStores.csv')

"""### 2] Data Understanding (Asking Questions)"""

#1- read data
#2- print head and tail
#3- info about data
#4- describe data
#5- Check missing values
#6- if missing values in any column ---> handle
#7- unique values and value count for each column
#8- shape of data

"""##### Check the content of the DataFrame"""

#print head and tail
BikeStores_data.head()

BikeStores_data.tail()

#info about data
BikeStores_data.info()

#describe data
BikeStores_data.describe()

#Check missing values
BikeStores_data.isna().sum()

#if missing values in any column ---> handle
#there are no missing values in the dataset

#unique values and value count for each column
# Number of unique values per column
BikeStores_data.nunique()

value_counts = {col: BikeStores_data[col].value_counts() for col in BikeStores_data.columns}
print(value_counts)

# # For all columns (dictionary of value counts)
# all_value_counts = {col: BikeStores_data[col].value_counts().to_dict() for col in BikeStores_data.columns}
# print(all_value_counts)

"""##### How many rows and columns are there?"""

# Rows, Columns
BikeStores_data.shape

"""##### Check the data types"""

# Show data types of all columns
print(BikeStores_data.dtypes)

# Statistical Summary
# Summary statistics (mean, std, min, max, quartiles)
print(BikeStores_data.describe())

# Include categorical/object columns in the summary
print(BikeStores_data.describe(include='all'))

"""### 3] Data Wrangling (Cleaning & Manipulation)

##### Are there any missing / duplicated data?
"""

# Count missing values per column
print(BikeStores_data.isnull().sum())

# Count total duplicated rows (exact duplicates)
print(BikeStores_data.duplicated().sum())

#print(BikeStores_data[BikeStores_data.duplicated()])

"""#remove null
#Replace >>
## Numerical>> Mean , Categorical >> Mode
data.fillna(....)
data.dropna()
"""

for col in BikeStores_data.columns:
    if BikeStores_data[col].dtype in ['int64', 'float64']:  # Numerical columns
        BikeStores_data[col] = BikeStores_data[col].fillna(BikeStores_data[col].mean())
    else:  # Categorical columns
        BikeStores_data[col] = BikeStores_data[col].fillna(BikeStores_data[col].mode()[0])

#Sort Values
# Sort by 'Column1' in ascending order (default)
BikeStores_data = BikeStores_data.sort_values(by='revenue')
BikeStores_data.head()

#Add Column

"""##### Double-check for the columns names and update any of them if needed"""

#Rename Columns
#there is no need to rename any column

"""##### Can you convert the City column to UpperCases?"""

BikeStores_data = pd.DataFrame(BikeStores_data)

BikeStores_data.city = BikeStores_data.city.str.upper()

BikeStores_data["city"].head()

"""### 4] Data Analysis & Visualization (EDA & Statistical Analysis)
#### Exploratory Data Analysis

##### What is the average Revenue?
"""

# Calculate the average revenue
average_revenue = BikeStores_data['revenue'].mean()

# Print the result
print(f"The average revenue is: {average_revenue}")

import seaborn as sns
import matplotlib.pyplot as plt
sns.boxplot(y=BikeStores_data['revenue'], color='orange')
plt.ylabel("Revenue")
plt.title("Revenue Distribution with Mean")
plt.axhline(average_revenue, color='red', linestyle='--', label=f"Mean: {average_revenue:.2f}")
plt.legend()
plt.show()

plt.hist(BikeStores_data['revenue'], bins=10, color='purple', alpha=0.7, edgecolor='black')
plt.axvline(average_revenue, color='red', linestyle='--', label=f"Mean: {average_revenue:.2f}")
plt.xlabel("Revenue")
plt.ylabel("Frequency")
plt.title("Revenue Distribution with Mean")
plt.legend()
plt.show()

"""##### What were the highest and lowest Revenue?"""

# Find the highest revenue
highest_revenue = BikeStores_data['revenue'].max()
# Print the result
print(f"The highest revenue is: {highest_revenue}")

# Find the lowest revenue
lowest_revenue = BikeStores_data['revenue'].min()
# Print the result
print(f"The lowest revenue is: {lowest_revenue}")

# Bar plot
plt.bar(['Max Revenue', 'Min Revenue'], [highest_revenue, lowest_revenue], color=['green', 'red'])
plt.ylabel('Revenue')
plt.title('Maximum and Minimum Revenue')
plt.show()

# Line plot
plt.plot(['Min Revenue', 'Max Revenue'], [lowest_revenue, highest_revenue], marker='o', color='blue')
plt.ylabel('Revenue')
plt.title('Range of Revenue (Min to Max)')
plt.show()

"""##### How many orders have 'Road Bikes'  as a category name ?"""

road_bikes_count = BikeStores_data[BikeStores_data['category_name'] == 'Road Bikes'].shape[0]

print(road_bikes_count)

# Text annotation
plt.figure(figsize=(6, 3))
plt.text(0.5, 0.5, f'Road Bikes Count: {road_bikes_count}', fontsize=16, ha='center', va='center', bbox=dict(facecolor='lightblue', alpha=0.5))
plt.axis('off')  # Turn off axes
plt.title('Count of Road Bikes')
plt.show()

BikeStores_data['category_name'].unique()

# categories = ['Road Bikes', 'Children Bicycles', 'Cruisers Bicycles','Mountain Bikes','Comfort Bicycles',
# 'Road Bikes','Cyclocross Bicycles','Electric Bikes']
# children_bicycles_count = BikeStores_data[BikeStores_data['category_name'] == 'Children Bicycles'].shape[0]
# cruisers_bicycles_count = BikeStores_data[BikeStores_data['category_name'] == 'Cruisers Bicycles'].shape[0]
# mountain_bikes_count = BikeStores_data[BikeStores_data['category_name'] == 'Mountain Bikes'].shape[0]
# comfort_bicycles_count = BikeStores_data[BikeStores_data['category_name'] == 'Comfort Bicycles'].shape[0]
# cyclocross_bicycles_count = BikeStores_data[BikeStores_data['category_name'] == 'Cyclocross Bicycles'].shape[0]
# electric_bikes_count = BikeStores_data[BikeStores_data['category_name'] == 'Electric Bikes'].shape[0]
# counts = [road_bikes_count,children_bicycles_count,cruisers_bicycles_count, mountain_bikes_count,
# comfort_bicycles_count,cyclocross_bicycles_count,electric_bikes_count]

"""##### Display the data which revenue greater than 10000"""

# Filter rows where Revenue is greater than 10000
high_revenue_data = BikeStores_data[BikeStores_data['revenue'] > 10000]

# Display the filtered data
high_revenue_data.head()

"""##### what is the total revenue for each Brand ?"""

# Group by 'brand_name', sum the 'Revenue', and reset index
brand_revenue = BikeStores_data.groupby('brand_name')['revenue'].sum().reset_index()

# Rename columns for clarity (optional)
brand_revenue.rename(columns={'revenue': 'Total Revenue'}, inplace=True)

# Display the result
print(brand_revenue)

# Sort by Total Revenue in descending order
brand_revenue = brand_revenue.sort_values(by='Total Revenue', ascending=False)

# Bar plot
plt.figure(figsize=(8, 5))
plt.bar(brand_revenue['brand_name'], brand_revenue['Total Revenue'], color='orange')
plt.xlabel('Brand Name')
plt.ylabel('Total Revenue')
plt.title('Total Revenue by Brand (Sorted)')
plt.xticks(rotation=45)
plt.show()

"""##### what is the total revenue for each Category Name ?"""

# Group by 'Category_name', sum the 'Revenue', and reset index
category_revenue = BikeStores_data.groupby('category_name')['revenue'].sum().reset_index()

# Rename columns for clarity (optional)
category_revenue.rename(columns={'revenue': 'Total Revenue'}, inplace=True)

# Display the result
print(category_revenue)

# Sort by Total Revenue in descending order
category_revenue = category_revenue.sort_values(by='Total Revenue', ascending=False)

# Bar plot
plt.figure(figsize=(8, 5))
plt.bar(category_revenue['category_name'], category_revenue['Total Revenue'], color='orange')
plt.xlabel('Category Name')
plt.ylabel('Total Revenue')
plt.title('Total Revenue by Brand (Sorted)')
plt.xticks(rotation=45)
plt.show()

"""### you should ask 4 questions and answer it

what is the total revenue for each Store Name ?
"""

# Group by 'store_name', sum the 'Revenue', and reset index
store_revenue = BikeStores_data.groupby('store_name')['revenue'].sum().reset_index()

# Rename columns for clarity (optional)
store_revenue.rename(columns={'revenue': 'Total Revenue'}, inplace=True)

# Display the result
print(store_revenue)

"""what is the total revenue for each Store Name ?"""

# Sort by Total Revenue in descending order
store_revenue = store_revenue.sort_values(by='Total Revenue', ascending=False)

# Bar plot
plt.figure(figsize=(8, 5))
plt.bar(store_revenue['store_name'], store_revenue['Total Revenue'], color='orange')
plt.xlabel('Store Name')
plt.ylabel('Total Revenue')
plt.title('Total Revenue by Brand (Sorted)')
plt.xticks(rotation=45)
plt.show()

# Group by 'product_name', sum the 'Revenue', and reset index
product_revenue = BikeStores_data.groupby('product_name')['revenue'].sum().reset_index()

# Rename columns for clarity (optional)
product_revenue.rename(columns={'revenue': 'Total Revenue'}, inplace=True)

# Display the result
print(product_revenue)

"""what is the most product_name was sold in Lockport city ?


"""

# Filter the data for the city 'Lockport'
lockport_data = BikeStores_data[BikeStores_data['city'] == 'LOCKPORT']

# Count the number of orders for each product
product_counts = lockport_data['product_name'].value_counts()

# Find the product with the highest count
most_sold_product = product_counts.idxmax()  # Get the product name
most_sold_count = product_counts.max()       # Get the total count

# Print the result
print(f"The most sold product in Lockport is '{most_sold_product}' with a total of {most_sold_count} orders.")

plt.figure(figsize=(12,6))
sns.barplot(x=product_counts.index, y=product_counts.values)
plt.xticks(rotation=45, ha='right')
plt.xlabel('Product Name')
plt.ylabel('Number of Orders')
plt.title('Number of Orders per Product in Lockport')
plt.tight_layout()
plt.show()

"""how many categories exist in brand trek ?"""

# Filter the data for the brand 'Trek'
trek_data = BikeStores_data[BikeStores_data['brand_name'] == 'Trek']

# Get the unique categories for 'Trek'
unique_categories = trek_data['category_name'].nunique()

# Print the result
print(f"The number of unique categories for the brand 'Trek' is: {unique_categories}")

#now i need to get the number of products in each category in this brand

revenue_per_category = trek_data.groupby('category_name')['revenue'].sum()

print(f"The Revenue Per Category is :{revenue_per_category}")

plt.figure(figsize=(12,6))
sns.barplot(x=revenue_per_category.index, y=revenue_per_category.values)
plt.xticks(rotation=45, ha='right')
plt.xlabel('Brand Name')
plt.ylabel('Revenue')
plt.title('Revenue For Trek Brand Categories')
plt.tight_layout()
plt.show()

BikeStores_data['city'].value_counts()

BikeStores_data['state'].value_counts()

Amesterdam_city_stores = BikeStores_data[BikeStores_data['city']=='AMSTERDAM']
Amesterdam_stores_count = Amesterdam_city_stores.groupby('city')['store_name'].value_counts()
print(Amesterdam_stores_count)

Tonawanda_city_stores = BikeStores_data[BikeStores_data['city']=='TONAWANDA']
Tonawanda_stores_count = Tonawanda_city_stores.groupby('city')['store_name'].value_counts()
print(Tonawanda_stores_count)

"""### The most customers from which city and which state ?"""

# Group by 'city' and 'state', and count the number of customers
customer_counts = (
    BikeStores_data
    .groupby(['city', 'state'])['customers']
    .size()
    .reset_index(name='customer_count')
)

# Find the row with the maximum customer count
most_customers_row = customer_counts.loc[customer_counts['customer_count'].idxmax()]

# Extract the city, state, and customer count
most_customers_city = most_customers_row['city']
most_customers_state = most_customers_row['state']
most_customers_count = most_customers_row['customer_count']

# Print the result
print(f"The city with the most customers is '{most_customers_city}', {most_customers_state} "
      f"with a total of {most_customers_count} customers.")

# Group by 'state' and count the number of customers
state_customer_counts = (
    BikeStores_data
    .groupby('state')['customers']
    .size()
    .reset_index(name='customer_count')
)

# Sort by customer count for better visualization
state_customer_counts = state_customer_counts.sort_values(by='customer_count', ascending=False)

# Bar chart for states
plt.figure(figsize=(10, 6))
plt.bar(state_customer_counts['state'], state_customer_counts['customer_count'], color='lightgreen')
plt.xlabel('State')
plt.ylabel('Number of Customers')
plt.title('Customer Distribution Across States')
plt.xticks(rotation=45, ha='right')
plt.show()

"""# GOOD LUCK!"""