# -*- coding: utf-8 -*-
"""Machine_Learning_Task2_Sales_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/189M2jLVwTOhHFVvLahbPfqtL_fl7m5jt
"""

#loading the dataset then converting it to dataframe
import pandas as pd

file_path = input("Enter the path to your sales data file: ")
print("Loading data...")

try:
    df = pd.read_csv(file_path)
    print(f"Data loaded! Total transactions: {len(df)}")
except FileNotFoundError:
    print(f"Error: The file '{file_path}' was not found.")
except Exception as e:
    print(f"An error occurred while loading the file: {e}")

#!pip install kaggle

#!kaggle datasets download -d quanganh2001/salesdatacsv

from google.colab import data_table
data_table.DataTable(df)

#Summary for the dataset
df.info()

df.isna().sum()

df.describe()

#rename the columns to can use it
df = df.rename(columns={'Price Per Unit': 'Price_Per_Unit'})
df = df.rename(columns={'Product Category': 'Product_Category'})
df = df.rename(columns={'Total Amount': 'Total_Amount'})

"""Calculate total revenue from sales data"""
def calculate_total_revenue(df):
  if 'Total_Amount' in df.columns:
    return df['Total_Amount'].sum()
  else :
    return (df['Price_Per_Unit'] * df['Quantity']).sum()

"""Calculate average sale per transaction"""
def calculate_average_sale(df):
  return calculate_total_revenue(df) / len(df)

"""Find highest individual sale amounts"""
def calculate_highest_sales(df):
   if 'Total_Amount' in df.columns:
      totals = df['Total_Amount']
   else :
      totals = df['Quantity'] * df['Price_Per_Unit']
   max_idx = totals.idxmax() # retrun a pointer to the max value in Total_Amount Column
   return totals[max_idx], df.loc[max_idx, 'Product_Category'] # return the the max value from Total_Amount column and the product name that relate to the max sale

"""Find lowest individual sale amounts"""
def calculate_lowest_sales(df):
  if 'Total_Amount' in df.columns:
      totals = df['Total_Amount']
  else :
    totals = df['Quantity'] * df['Price_Per_Unit']
  min_idx = totals.idxmin() #retrun a pointer to the min value in Total_Amount Column
  return totals[min_idx], df.loc[min_idx, 'Product_Category'] #return the the max value from Total_Amount column and the product name that relate to the max sale

"""Identify best-selling product by quantity sold"""
def find_best_selling_product(df):
  product_sales = df.groupby('Product_Category')['Quantity'].sum()
  return product_sales.idxmax(),product_sales.max() #return best sale product with best Solded Quantity

print("Retail Sales Report")

print("----------------------------")
print(f"Total Transactions: {len(df)}")
print(f"Total Revenue: ${calculate_total_revenue(df):.0f}")
print(f"Average Sale: ${calculate_average_sale(df):.0f}")
max_sale , max_product = calculate_highest_sales(df)
print(f"Highest Sale: ${max_sale:.0f} (Product: {max_product})")
min_sale, min_product = calculate_lowest_sales(df)
print(f"Lowest Sale: ${min_sale:.0f}(Product: {min_product})")

best_product, best_quantity = find_best_selling_product(df)
print(f"Best-Selling Product: '{best_product}' (Quantity Sold: {best_quantity})")